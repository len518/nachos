package nachos.threads;

import nachos.machine.*;
import java.util.*;

/**
 * Uses the hardware timer to provide preemption, and to allow threads to sleep
 * until a certain time.
 */
public class Alarm {
	protected waitQueue waitQ = new waitQueue(); 
    /**
     * Allocate a new Alarm. Set the machine's timer interrupt handler to this
     * alarm's callback.
     *
     * <p><b>Note</b>: Nachos will not function correctly with more than one
     * alarm.
     */
    public Alarm() {
	Machine.timer().setInterruptHandler(new Runnable() {
		public void run() { timerInterrupt(); }
	    });
    }

    /**
     * The timer interrupt handler. This is called by the machine's timer
     * periodically (approximately every 500 clock ticks). Causes the current
     * thread to yield, forcing a context switch if there is another thread
     * that should be run.
     */
    public void timerInterrupt() {
	Machine.interrupt().disable();
	
	//int largo = waits.size(); 
		//System.out.println("en el timer interrupt"+Machine.timer().getTime());
		waitQ.remove();	

	Machine.interrupt().enable();
	KThread.currentThread().yield();


    }

    /**
     * Put the current thread to sleep for at least <i>x</i> ticks,
     * waking it up in the timer interrupt handler. The thread must be
     * woken up (placed in the scheduler ready set) during the first timer
     * interrupt where
     *
     * <p><blockquote>
     * (current time) >= (WaitUntil called time)+(x)
     * </blockquote>
     *
     * @param	x	the minimum number of clock ticks to wait.
     *
     * @see	nachos.machine.Timer#getTime()
     */
    public void waitUntil(long x) {
	// for now, cheat just to get something working (busy waiting is bad)
      Machine.interrupt().disable();KThread.currentThread()
	long wakeTime =  Machine.timer().getTime() + x;
	waitQ.add(KThread.currentThread(),wakeTime);
	KThread.currentThread().sleep();
	//Machine.interrupt().enable();
    }
}
class waitQueue {
	public LinkedList<KThread> waits;
	public LinkedList wakeups;
	public waitQueue(){
		waits = new LinkedList<KThread>();
		wakeups = new LinkedList();
	}
	public void add(KThread k, long wt){
		waits.addFirst(k);
		wakeups.addFirst(wt);
	}
	public void remove(){
		KThread currentWait;
		long currentWakeup;
		for (int i = 0;i<waits.size();i++){
			
			currentWait =  waits.get(i);
			currentWakeup = ((Long) wakeups.get(i)).longValue(); 
			
			if (Machine.timer().getTime() > currentWakeup ){
				//System.out.println( "tiempo de la maquin"+ Machine.timer().getTime() );
				//System.out.println("en alarm chingando la pita -->" + currentWakeup + currentWait.getName());
				//System.out.println("hubo un wake"+currentWait.getName());
				waits.remove(i);
				wakeups.remove(i);
				currentWait.ready();
				i--;
			
			}
			
		}
	}

}
